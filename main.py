import cv2
import onnxruntime
import numpy as np
import tensorflow as tf
import onnx
from onnx_tf.backend import prepare
#from PIL import Image
from IPython.display import display
from matplotlib import pyplot as plt


input_img_name = "input.jpg"
width, height = 256, 256
models = {
    "styria_onnx": "sat_model_styria.onnx",
    "tyrol_onnx": "sat_model_tyrol.onnx",
    "styria_h5": "sat_model_styria_300K.h5"
}

def import_image(file_name:str, width:int, height:int):
    return cv2.resize(cv2.imread(file_name, cv2.IMREAD_GRAYSCALE), (width, height))

def import_img(file_name:str):
    return tf.io.read_file(file_name)

def load_model(model_name:str): #TODO entwerder .h5 loaden oder onnx verwenden
    return tf.keras.models.load_model(model_name), model_name
    onnx_model = onnx.load(model_name)
    return prepare(onnx_model), model_name
    #return onnxruntime.InferenceSession(model_name), model_name

def ai_process(model, input_data):
    return model(input_data, training=True)
    return model.run(input_data, training=True) #TODO training=True sinnvoll?

def convert_data_for_ai(img):
    tensor = tf.io.decode_image(img, channels=3, dtype=tf.dtypes.float32)
    tensor = tf.image.resize(tensor, [width, height])
    tensor = tf.expand_dims(tensor, axis=0)
    display(tensor)
    return tensor # input for Tensorflow
    return [{'x':tensor}] # input for ONNX

def show_img(img, title:str, wait_key = 0):
    cv2.imshow(title, img)
    cv2.waitKey(wait_key)
    cv2.destroyAllWindows()

if __name__ == '__main__':
    #img_depth = import_image(input_img_name, width, height)
    #show_img(img_depth, "Processed Depth Image from Unity")

    img_depth = import_img(input_img_name)
    model, model_used = load_model(models["styria_h5"])
    img_depth_converted = convert_data_for_ai(img_depth)
    img_sat = ai_process(model, img_depth_converted)
    display(img_sat[0])
    #show_img(img_sat, "Deepfake Image generated by AI (" + model_used + ")")

    display_list = [img_depth_converted[0], img_sat[0]]
    title = ['Input Image', 'Output Image']

    for i in range(2):
        plt.subplot(1, 2, i+1)
        plt.title(title[i])
        # Getting the pixel values in the [0, 1] range to plot.
        plt.imshow(display_list[i] * 0.5 + 0.5)
        plt.axis('off')
    plt.show()


